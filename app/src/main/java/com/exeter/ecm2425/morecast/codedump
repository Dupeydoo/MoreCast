public void getLocation() {
             if (ContextCompat.checkSelfPermission(activity,
                     Manifest.permission.ACCESS_FINE_LOCATION)
                     != PackageManager.PERMISSION_GRANTED) {

                 ActivityCompat.requestPermissions(activity,
                         new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 0);

             } else {
                 locClient.getLastLocation().addOnSuccessListener(
                         new OnSuccessListener<Location>() {
                             @Override
                             public void onSuccess(Location location) {
                                 if (location != null) {
                                     APILocation.location = location;
                                 }
                             }
                         }
                 );
             }
         }


    private LocationRequest createLocationRequest() {
        LocationRequest locationRequest = new LocationRequest();
        locationRequest.setNumUpdates(1);
        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        return locationRequest;
    }


private void getLocationUpdate(LocationRequest request) {
        callback = new LocationCallback() {
            @Override
            public void onLocationResult(LocationResult locationResult) {
                for(Location location: locationResult.getLocations()) {
                    System.out.println(location.getLatitude());
                    APILocation.location = location;
                }
            }
        };

        if (ContextCompat.checkSelfPermission(activity,
                Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {

            ActivityCompat.requestPermissions(activity,
                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 0);

        } else {
            locClient.requestLocationUpdates(request, callback,null);
        }

    }

    public static class TodayViewHolder extends RecyclerView.ViewHolder {
            public TodayView view;
            public TodayViewHolder(View view) {
                super(view);
                view = (TodayView) view;
            }
        }

        FiveDayForecastDao dao = MorecastDatabase.getMorecastDatabase(getApplicationContext()).getFiveDayForecastDao();
                        List<FiveDayForecast> forecast = dao.getFiveDayForecast();
                        System.out.println(forecast.toString());
                        System.out.println("It worked!");

        public void recyclerClick(View view) {
                ArrayList<FiveDayForecast> forecast = resultData.getParcelableArrayList("forecast");
                Class destination = DetailedActivity.class;
                Intent intent = new Intent(this, destination);
                intent.putParcelableArrayListExtra("forecasts", forecast);
                startActivity(intent);
            }







            Long utcEpoch = ResultParser.getWeatherEpoch(currentForecastData);
                    JSONObject timeZoneResult = calculateTimeZoneOffset(coords, utcEpoch);
                    Long adjustedEpoch = 1000 * (timeZoneResult.optLong("dstOffset")
                            + timeZoneResult.optLong("rawOffset") + utcEpoch);
                    forecast.setEpochTime(adjustedEpoch);
                    String dateTime = DateHandler.getDateStringFromEpoch(adjustedEpoch);
                    forecast.setDateTime(dateTime);